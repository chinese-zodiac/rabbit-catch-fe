/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MetaTransactionExecuted = ContractEventLog<{
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RabbitCreed extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RabbitCreed;
  clone(): RabbitCreed;
  methods: {
    accountToCode(arg0: string): NonPayableTransactionObject<string>;

    addRewards(_code: string): PayableTransactionObject<void>;

    codeToAccount(arg0: string): NonPayableTransactionObject<string>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: string | number[],
      sigR: string | number[],
      sigS: string | number[],
      sigV: number | string | BN
    ): PayableTransactionObject<string>;

    getNonce(user: string): NonPayableTransactionObject<string>;

    isCodeRegistered(_code: string): NonPayableTransactionObject<boolean>;

    isValidNewCode(_code: string): NonPayableTransactionObject<boolean>;

    payments(dest: string): NonPayableTransactionObject<string>;

    register(_code: string): NonPayableTransactionObject<void>;

    rewards(arg0: string): NonPayableTransactionObject<string>;

    unregister(): NonPayableTransactionObject<void>;

    withdrawPayments(payee: string): NonPayableTransactionObject<void>;
  };
  events: {
    MetaTransactionExecuted(
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;
    MetaTransactionExecuted(
      options?: EventOptions,
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "MetaTransactionExecuted",
    cb: Callback<MetaTransactionExecuted>
  ): void;
  once(
    event: "MetaTransactionExecuted",
    options: EventOptions,
    cb: Callback<MetaTransactionExecuted>
  ): void;
}
