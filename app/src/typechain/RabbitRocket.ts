/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MetaTransactionExecuted = ContractEventLog<{
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
  0: string;
  1: string;
  2: string;
}>;
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string;
  newOwner: string;
  0: string;
  1: string;
}>;
export type RoleAdminChanged = ContractEventLog<{
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleGranted = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;
export type RoleRevoked = ContractEventLog<{
  role: string;
  account: string;
  sender: string;
  0: string;
  1: string;
  2: string;
}>;

export interface RabbitRocket extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): RabbitRocket;
  clone(): RabbitRocket;
  methods: {
    DEFAULT_ADMIN_ROLE(): NonPayableTransactionObject<string>;

    MASTER_ROLE(): NonPayableTransactionObject<string>;

    countdownSeconds(): NonPayableTransactionObject<string>;

    endEpoch(): NonPayableTransactionObject<string>;

    endGameNow(_winner: string): PayableTransactionObject<void>;

    endGameOverride(): NonPayableTransactionObject<boolean>;

    executeMetaTransaction(
      userAddress: string,
      functionSignature: string | number[],
      sigR: string | number[],
      sigS: string | number[],
      sigV: number | string | BN
    ): PayableTransactionObject<string>;

    fix(
      _startEpoch: number | string | BN,
      _whitelistEndEpoch: number | string | BN,
      _countdownSeconds: number | string | BN,
      _endEpoch: number | string | BN,
      _lastBuyer: string,
      _endGameOverride: boolean
    ): NonPayableTransactionObject<void>;

    getNonce(user: string): NonPayableTransactionObject<string>;

    getRoleAdmin(role: string | number[]): NonPayableTransactionObject<string>;

    getRoleMember(
      role: string | number[],
      index: number | string | BN
    ): NonPayableTransactionObject<string>;

    getRoleMemberCount(
      role: string | number[]
    ): NonPayableTransactionObject<string>;

    grantRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    hasRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<boolean>;

    isOver(): NonPayableTransactionObject<boolean>;

    isStarted(): NonPayableTransactionObject<boolean>;

    isWhitelistOnly(): NonPayableTransactionObject<boolean>;

    lastBuyer(): NonPayableTransactionObject<string>;

    owner(): NonPayableTransactionObject<string>;

    payments(dest: string): NonPayableTransactionObject<string>;

    renounceOwnership(): NonPayableTransactionObject<void>;

    renounceRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    revokeRole(
      role: string | number[],
      account: string
    ): NonPayableTransactionObject<void>;

    sendRewards(): NonPayableTransactionObject<void>;

    setCountdownSeconds(
      _to: number | string | BN
    ): NonPayableTransactionObject<void>;

    setEpochs(
      _startEpoch: number | string | BN,
      _whitelistEndEpoch: number | string | BN
    ): NonPayableTransactionObject<void>;

    startEpoch(): NonPayableTransactionObject<string>;

    supportsInterface(
      interfaceId: string | number[]
    ): NonPayableTransactionObject<boolean>;

    timerReset(_buyer: string): PayableTransactionObject<void>;

    transferOwnership(newOwner: string): NonPayableTransactionObject<void>;

    whitelistEndEpoch(): NonPayableTransactionObject<string>;

    withdrawPayments(payee: string): NonPayableTransactionObject<void>;
  };
  events: {
    MetaTransactionExecuted(
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;
    MetaTransactionExecuted(
      options?: EventOptions,
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter;
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>
    ): EventEmitter;

    RoleAdminChanged(cb?: Callback<RoleAdminChanged>): EventEmitter;
    RoleAdminChanged(
      options?: EventOptions,
      cb?: Callback<RoleAdminChanged>
    ): EventEmitter;

    RoleGranted(cb?: Callback<RoleGranted>): EventEmitter;
    RoleGranted(
      options?: EventOptions,
      cb?: Callback<RoleGranted>
    ): EventEmitter;

    RoleRevoked(cb?: Callback<RoleRevoked>): EventEmitter;
    RoleRevoked(
      options?: EventOptions,
      cb?: Callback<RoleRevoked>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "MetaTransactionExecuted",
    cb: Callback<MetaTransactionExecuted>
  ): void;
  once(
    event: "MetaTransactionExecuted",
    options: EventOptions,
    cb: Callback<MetaTransactionExecuted>
  ): void;

  once(event: "OwnershipTransferred", cb: Callback<OwnershipTransferred>): void;
  once(
    event: "OwnershipTransferred",
    options: EventOptions,
    cb: Callback<OwnershipTransferred>
  ): void;

  once(event: "RoleAdminChanged", cb: Callback<RoleAdminChanged>): void;
  once(
    event: "RoleAdminChanged",
    options: EventOptions,
    cb: Callback<RoleAdminChanged>
  ): void;

  once(event: "RoleGranted", cb: Callback<RoleGranted>): void;
  once(
    event: "RoleGranted",
    options: EventOptions,
    cb: Callback<RoleGranted>
  ): void;

  once(event: "RoleRevoked", cb: Callback<RoleRevoked>): void;
  once(
    event: "RoleRevoked",
    options: EventOptions,
    cb: Callback<RoleRevoked>
  ): void;
}
